AWSTemplateFormatVersion: "2010-09-09"
Description: Amazon Rekognition Custom Labels Demo (uksb-1q6fl3pi5)
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 30
    Environment:
      Variables:
        COGNITO_IDENTITY_POOL: !Ref CognitoIdentityPool
        FROM_BUCKET: !Sub solution-builders-${AWS::Region}
        CREATE_CLOUDFRONT_DISTRIBUTION: !Ref CreateCloudFrontDistribution
        REGION: !Ref AWS::Region
        REKOGNITION_BASE_URL: !If
          - WithServiceOverride
          - !Ref ServiceOverride
          - !Sub https://rekognition.${AWS::Region}.amazonaws.com
        TO_BUCKET: !Ref WebUIBucket
        VERSION: "0.8"

Parameters:
  ResourcePrefix:
    Description: AWS Resources are named based on the value of this parameter. You must customise this if you are launching more than one instance of the stack within the same account.
    Type: String
    Default: RekogCustomLabelsDemo
    AllowedPattern: ^[a-zA-Z0-9_]*$
  CreateCloudFrontDistribution:
    Description: Creates a CloudFront distribution for accessing the web interface of the demo. This must be enabled if S3 Block Public Access is enabled at an account level.
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  ServiceOverride:
    Description: Allows to test the Demo with a different Rekognition Base Url. It shouldn't be required for most of use-cases.
    Type: String
    Default: ""

Conditions:
  WithCloudFront: !Equals [!Ref CreateCloudFrontDistribution, "true"]
  WithServiceOverride: !Not [!Equals [!Ref ServiceOverride, ""]]

Outputs:
  url:
    Value: !If
      - WithCloudFront
      - !Sub "https://${CloudFrontDistribution.DomainName}"
      - !Sub "https://${WebUIBucket.RegionalDomainName}/index.html"
    Description: Custom Labels Demo Url

Resources:
  SetupWebUI:
    Type: Custom::Setup
    Properties:
      ServiceToken: !GetAtt LambdaSetup.Arn
      Region: !Ref AWS::Region

  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET]
            AllowedOrigins: ["*"]
            Id: !Sub ${ResourcePrefix}RekogCorsRule
            MaxAge: 3600

  WebUIBucketReadPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: WithCloudFront
    Properties:
      Bucket: !Ref WebUIBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${WebUIBucket}/*
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ResourcePrefix}RekogIdentityPool
      AllowUnauthenticatedIdentities: true

  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt RekognitionInvokeRole.Arn
        unauthenticated: !GetAtt RekognitionInvokeRole.Arn

  RekognitionInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:AssumeRoleWithWebIdentity

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: RekogCustomLabelsDemo-setup-S3-fc
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"
        - PolicyName: RekogCustomLabelsDemo-cloudwatch-logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"

  LambdaSetup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}RekogCustomLabelsDemoSetup
      Handler: index.handler
      CodeUri: ../backend/functions/setup/
      Description: Custom Lambda resource for the Amazon Rekognition Custom Labels Demo Cloudformation Stack
      Role: !GetAtt CustomResourceRole.Arn

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: WithCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref WebUIBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: WithCloudFront
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebUIBucket.RegionalDomainName
            Id: !Sub ${ResourcePrefix}-myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        Comment: The Distribution for the Rekognition Custom Label Demo
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: !Sub ${ResourcePrefix}-myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
